'use strict';
let im = require('imagemagick');
let fs = require('fs');
let aws = require('aws-sdk');
let s3 = new aws.S3({ apiVersion: '2006-03-01' });

const resize = (event, context, callback) => {
    console.log('event.Records[0]:' + JSON.stringify(event));
    
    
    if (event.Records[0].EventSource && event.Records[0].EventSource == 'aws:sns') {
        //event triggered via SNS
        console.log("event is from SNS." + event.Records[0].Sns.Message)
        let eventO = event
        event = JSON.parse(eventO.Records[0].Sns.Message);
    }
    
    let image_original = event.Records[0].s3.object.key;
    console.log(`image_original:` + image_original);
    let base64Image;
    
    // Get the object from the event and show its content type
    const bucket = event.Records[0].s3.bucket.name;
    const key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, ' '));
    let params = {
        Bucket: bucket,
        Key: key
    };
    
    s3.getObject(params, (err, data) => {
        if (err) {
            console.log(err);
            const message = `Error getting object ${key} from bucket ${bucket}. Make sure they exist and your bucket is in the same region as this function.`;
            console.log(message);
            callback(message);
        } else {
            console.log('CONTENT TYPE:', data.ContentType);
            event.base64Image = data.Body; 
        }
    
    // If neither height nor width was provided, turn this into a thumbnailing request
    if (!event.height && !event.width) {
        event.width = 459; //707; //312;
    }
    
    var keysMap = { 'deals/m1/123.jpg':1}
    
    let mapParam = { 
        Bucket: bucket,
        Key: 'deals/keysMap.txt'
    }
    s3.getObject(mapParam, (err, data) => { 
        if (err) {
            console.log('keysMap not found')
            mapParam.Body = JSON.stringify(keysMap);
            mapParam.ContentType = 'application/json';
    
            s3.upload(mapParam, function(err, data) { if (err) { console.log('error while uploading keysMap', err.stack)}  });
        } else {
            console.log('yeeeaa.... keysMap  found', JSON.parse(data.Body))
            keysMap = JSON.parse(data.Body);
        }
    });
    resizeAndUpload(event, image_original, bucket, callback, context);

    //event.width = 707;
    //event.base64Image = data.Body;
    //resizeAndUpload(event, image_original, bucket, callback, context);
});
};


function resizeAndUpload (event, image_original, bucket, callback, context) {

    const resizedFile = `/tmp/resized.${(event.outputExtension || 'jpg')}`;
    
    var newPath = image_original.substr(0, image_original.lastIndexOf("/") + 1);
    var origName = image_original.substr(image_original.lastIndexOf("/") + 1);
    var newName = origName.substr(0, origName.lastIndexOf(".jpg")) + (event.width == 707 ? "_op." : "_" + event.width + ".");
    
    console.log("origName:" + origName + ", newName:" + newName);
    
    const resizedFile2 = newPath + newName + `${(event.outputExtension || 'jpg')}`;
    console.log("resizedFile2: " + resizedFile2);
    
    let buffer = new Buffer(event.base64Image, 'base64');
    delete event.base64Image;
    delete event.outputExtension;
    event.srcData = buffer;
    event.dstPath = resizedFile;
    event.quality = 0.90;
    event.sharpening = 0.0;
    try {
        im.resize(event, (err, stdout, stderr) => {
            if (err) {
                throw err;
            } else {
                console.log('Resize operation completed successfully');
                //let buffer = postProcessResource(resizedFile, (file) => new Buffer(fs.readFileSync(file)).toString('base64'));
                let buffer = new Buffer(fs.readFileSync(resizedFile), 'base64');
                var param = { 
                            Bucket: bucket, Key: resizedFile2, Body: buffer, 
                            ContentEncoding: 'base64', ContentType: 'image/jpeg',
                            ACL: 'public-read'    
                            };
                
                s3.upload(param, function(err, data) {
                    if (err) console.log(err, err.stack); // an error occurred
                    else console.log(data);           // successful response
            
                    console.log('actually done!');
                    context.done();
                });
                if (callback) {
                    callback(null, buffer);
                }
            }
        });
    } catch (err) {
        console.log('Resize operation failed:', err);
        if (callback) {
            callback(err);
        }
    }
    
    
}


exports.handler = (event, context, callback) => {
    event.operation = "resize";
    resize(event, context, callback);
};
